/*
 * digitalnewzealand
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 06/28/2016
 */

package models


/*
 * Structure for the custom type ResultsCollection
 */
type ResultsCollection struct {
    IsCommercialUse        bool            `json:"is_commercial_use "` //this record is licensed for commercial use
    Category               string          `json:"category"` //a string containing one or more category names separated by a comma (e.g. Images, Web pages)
    ContentPartner         string          `json:"content_partner"` //the institution holding the content to which the record refers
    Date                   *float32        `json:"date,omitempty"` //a date associated with the record (e.g. 1996-01-01T00:00:00.000Z). This field may be empty
    Description            string          `json:"description"` //text describing the record
    AdditionalDescription  string          `json:"additional_description"` //additional text describing the record
    LandingUrl             string          `json:"landing_url"` // the url for the content on the contentpartner's website. Please use the source_url when providing HTML links (see below)
    Id                     string          `json:"id"` //the internal DigitalNZ identifier (used by the Get Metadata API)
    SourceUrl              string          `json:"source_url"` //the url that will redirect users to the landing_url. By using this link (as opposed to the display_url) we are able to count clickthroughs which is helpful for demonstrating the value of DigitalNZ
    SyndicationDate        string          `json:"syndication_date"` //the date the record was added to DigitalNZ
    ThumbnailUrl           string          `json:"thumbnail_url"` //the url of for a thumbnail image of the content to which the record refers. This field may be empty.
    Title                  string          `json:"title"` //the title of the record
    GeoCoOrds              string          `json:"geo_co_ords"` //The latitude and longitude in the following format: namespace:lat,long; Multiple values are seperated by semi-colons, for example: namespace:lat,long;namespace:lat,long;namespace:lat,long; NOTE: namespace is optional.
    LargeThumbnailUrl      string          `json:"large_thumbnail_url"` //a larger thumbnail image with dimensions up to 800px (NB the API Terms do not extend rights to the use of these thumbnails)
    Copyright              *string         `json:"copyright,omitempty"` //the copyright statement applying to the object. This field may be empty.
    License                *string         `json:"license,omitempty"` //the licence for the object. This field may be empty
    RightsUrl              string          `json:"rights_url"` //the url of the object licence. This field may be empty.
    DisplayDate            string          `json:"display_date"` //string with date information in multiple, often unstructured formats (e.g. Circa 2000)
    PeerReviewed           bool            `json:"peer_reviewed"` //boolean, associated with research paper items. True indicates the research paper has been peer reviewed
    MarsdenCode            int             `json:"marsden_code"` //a number indicating the field of research
    Author                 string          `json:"author"` //lists the author's names
    NoLandingPage          bool            `json:"no_landing_page"` //boolean value, if set to true it indicates the item doesn't have an external landing page, usually because it is a downloadable item such as a pdf or mpeg
    ObjectUrl              string          `json:"object_url"` //a url pointing to a downloadable object, i.e. an image, pdf or mpeg
    PublishedDate          string          `json:"published_date"` //list of dates published 
    Publisher              string          `json:"publisher"` //lists the publisher's names
    Dctype                 string          `json:"dctype"` // Dublin Core categorisation indicating type
    LibraryCollection      string          `json:"library_collection"` //the library collection the item belongs to
    DisplayCollection      string          `json:"display_collection"` //the display collection the item belongs to
    CollectionParent       string          `json:"collection_parent"` //the item's parent collection
    CollectionRoot         string          `json:"collection_root"` //the top level collection
}

/*
 * Structure for the custom type CollectionSearchRecords
 */
type CollectionSearchRecords struct {
    NumResultsRequested   int             `json:"num_results_requested"` //the value of the num_results parameter sent to the API method
    ResultCount           int             `json:"result_count"` //the total number of results matching this search
    Start                 string          `json:"start"` //the value of the start parameter sent to the API method
    Results               ResultsCollection `json:"results"` //the search results data. The results element will contain 0 or more result elements
    Facets                map[string]interface{} `json:"facets"` //the facet result data (if requested). The facets element will contain one facet-field element corresponding to each facet requested. Each facet-field element contains a sorted list of value elements that are made up of a name and num-results element. 
}
