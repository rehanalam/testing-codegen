/*
 * digitalnewzealand
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 06/28/2016
 */
package metadata

import(
    "encoding/json"
    "github.com/apimatic/unirest-go"
    "digitalnewzealand"
    "digitalnewzealand/apihelper"
    "digitalnewzealand/models"
)

/*
 * Input structure for the method GetMetadata
 */
type GetMetadataInput struct {
    RecordId        string          //Record IDs are identified in the metadata_url field of a results set. 23034653 is an example record ID.
    Fields          string          //A comma separated list of fields or groups of fields to be returned for each record. Possible groups include 'default' and 'verbose'. If no value is specified, then the 'default' field group will be returned.
}

/*
 * Client structure as interface implementation
 */
type METADATA_IMPL struct { }

/**
 * The Get Metadata API call returns the available metadata for a specific item. The Get Metadata v3 request parameters and response format differs significantly from the depreciated Get Metadata v1 & v2 API call.
 * @param  GetMetadataInput     Structure with all inputs
 * @return	Returns the *models.CollectionSearchRecords response from the API call
 */
func (me *METADATA_IMPL) GetMetadata (input *GetMetadataInput) (*models.CollectionSearchRecords, error) {
    //the base uri for api requests
    queryBuilder := digitalnewzealand.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/v3/records/{record_id}.json"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "record_id" : input.RecordId,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithQueryParameters(queryBuilder, map[string]interface{} {
        "fields" : input.Fields,
        "api_key" : digitalnewzealand.Config.ApiKey,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper.NewAPIError("HTTP Response Not OK" , response.Code, response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal *models.CollectionSearchRecords = &models.CollectionSearchRecords{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

