/*
 * digitalnewzealand
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 06/28/2016
 */
package searchrecord

import(
    "encoding/json"
    "github.com/apimatic/unirest-go"
    "digitalnewzealand"
    "digitalnewzealand/apihelper"
    "digitalnewzealand/models"
)

/*
 * Input structure for the method SearchRecord
 */
type SearchRecordInput struct {
    Text            string          //TODO: Write general description for this field
    And             *string         //Restricts search to records matching all facet values. Example: "&and[content_partner][]=Kete+Horowhenua&and[category][]=Images"
    Or              *string         //Restricts search to records matching any of the specified facet values. Example: "&or[category][]=Image&or[category][]=Videos"without 
    Without         *string         //Restricts search to records that don't match any of the facet values. Example: "&without[category][]=Newspapers"
    Page            *int            //the page when iterating over a set of records. (Defaults to 1.)
    PerPage         *int            //the number of records the user wishes returned up to a maximum of 100. (Defaults to 20.)
    Facets          *string         //a list of facet fields to include in the output. See the note on facets below for more information. Example: "&facets=year,category"
    FacetsPage      *int            //the facet page to iterate over a set of facets. . (Defaults to 1.)
    FacetPerPage    *int            //the number of facets returned for every page. (Defaults to 10.)
    Sort            *string         //the field upon which results are sorted. Defaults to relevance sorting. The sort field must be one of: "category", "content_partner", "date", "syndication_date".
    Direction       *string         // the direction in which the results are sorted. Possible values: "desc", "asc".
    GeoBbox         *float32        //a geographic bounding box scoping a search to a geographic region. Order of latitude-longitude coordinates is north, west, south, east. For example, &geo_bbox=-41,174,-42,175 searches the Wellington region.
}

/*
 * Client structure as interface implementation
 */
type SEARCHRECORD_IMPL struct { }

/**
 * The Search Records API call returns a result set in response to a search query. The v3 Search Records API request parameters and response format differs significantly from the deprecated v1 & v2 Search Records API call.
 * @param  SearchRecordInput     Structure with all inputs
 * @return	Returns the *models.CollectionSearchRecords response from the API call
 */
func (me *SEARCHRECORD_IMPL) SearchRecord (input *SearchRecordInput) (*models.CollectionSearchRecords, error) {
    //the base uri for api requests
    queryBuilder := digitalnewzealand.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/v3/records.json"

    //variable to hold errors
    var err error = nil
    
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithQueryParameters(queryBuilder, map[string]interface{} {
        "text" : input.Text,
        "and" : input.And,
        "direction" : input.Direction,
        "facet_per_page" : apihelper.ToString(*input.FacetPerPage, "10"),
        "facets" : input.Facets,
        "facets_page" : apihelper.ToString(*input.FacetsPage, "1"),
        "geo_bbox" : input.GeoBbox,
        "or" : input.Or,
        "page" : apihelper.ToString(*input.Page, "1"),
        "per_page" : apihelper.ToString(*input.PerPage, "20"),
        "sort" : input.Sort,
        "without" : input.Without,
        "api_key" : digitalnewzealand.Config.ApiKey,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper.NewAPIError("HTTP Response Not OK" , response.Code, response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal *models.CollectionSearchRecords = &models.CollectionSearchRecords{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

